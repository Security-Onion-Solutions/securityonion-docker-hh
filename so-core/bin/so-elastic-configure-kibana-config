#!/bin/bash

. /opt/so/bin/so-elastic-common

. /opt/so/conf/securityonion.conf

header "Configuring Kibana"
MAX_WAIT=240

# Check to see if Elasticsearch is available
until curl -s -XGET http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_cluster/health > /dev/null ; do
	wait_step=$(( ${wait_step} + 1 ))
	if [ ${wait_step} -gt ${MAX_WAIT} ]; then
		echo "ERROR: Elasticsearch not available for more than ${MAX_WAIT} seconds."
		exit 5
	fi
	sleep 1s;
done

# KIBANA_VERSION in /etc/nsm/securityonion.conf may not actually reflect the current Kibana version
# Two possible cases:
# 1. In the case of a new installation, KIBANA_VERSION is explicitly set to "UNKNOWN"
# 2. In the case of a recent Kibana image upgrade, KIBANA_VERSION will be set to the previous version
# Therefore, we need to get the current version from Elasticsearch
KIBANA_VERSION=$(curl -s http://$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT | jq .version.number | sed 's/"//g')

# Check to see if Kibana is available
wait_step=0
until curl -s -XGET http://localhost:5601 > /dev/null ; do
	wait_step=$(( ${wait_step} + 1 ))
	echo "Waiting on Kibana...Attempt #$wait_step"
	if [ ${wait_step} -gt ${MAX_WAIT} ]; then
		echo "ERROR: Kibana not available for more than ${MAX_WAIT} seconds."
		exit 5
	fi
	sleep 1s;
done

# Check to see if Kibana config is available, so we can update it
#wait_step=0
#until curl -s -XGET http://localhost:5601/api/saved_objects/config/$KIBANA_VERSION | grep -v 404 > /dev/null; do
#	wait_step=$(( ${wait_step} + 1 ))
#	echo "Waiting on Kibana config...Attempt #$wait_step"
#	if [ ${wait_step} -gt ${MAX_WAIT} ]; then
#                echo "ERROR: Kibana config not available for more than ${MAX_WAIT} seconds."
#                exit 5
#        fi
#        sleep 1s;
#done

# Apply Kibana config
echo
echo "Applying Kibana config..."
curl -s -XPOST 'http://localhost:5601/api/saved_objects/index-pattern' \
    -H 'Content-Type: application/json' \
    -H "kbn-version: $KIBANA_VERSION" \
    -d '{"attributes":{"title":"*:logstash-*","timeFieldName":"@timestamp"}}'
echo
curl -s -XPOST -H "Content-Type: application/json" -H "kbn-xsrf: $KIBANA_VERSION" http://localhost:5601/api/saved_objects/config/$KIBANA_VERSION -d@$SRC/kibana/config.json
echo

# Apply cross cluster search seed info for local Elasticsearch instance
HOSTNAME=$(hostname)
echo
echo "Applying cross cluster search config..."
curl -s -XPUT http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_cluster/settings -H'Content-Type: application/json' -d "{\"persistent\": {\"search\": {\"remote\": {\"$HOSTNAME\": {\"seeds\": [\"127.0.0.1:9300\"]}}}}}"
echo

# Apply Kibana template
echo
echo "Applying Kibana template..."
curl -s -XPUT http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_template/kibana -H'Content-Type: application/json' -d'{"index_patterns" : ".kibana", "settings": { "number_of_shards" : 1, "number_of_replicas" : 0 }, "mappings" : { "search": {"properties": {"hits": {"type": "integer"}, "version": {"type": "integer"}}}}}'
echo

# Finally, update KIBANA_VERSION in securityonion.conf to reflect the current Kibana version
echo
echo "Updating /etc/nsm/securityonion.conf with correct Kibana version ($KIBANA_VERSION)..."
sed -i "s/KIBANA_VERSION=.*/KIBANA_VERSION=$KIBANA_VERSION/" /etc/nsm/securityonion.conf
echo
