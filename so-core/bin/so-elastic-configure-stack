#!/bin/bash

. /opt/so/bin/so-elastic-common

SOCONF="/opt/so/conf/securityonion.conf"
ELASTICONF="$SRC/etc/securityonion-elastic.conf"

header "Setting vm.max_map_count to 262144"
sysctl -w vm.max_map_count=262144
cp $SRC/etc/sysctl.d/* /etc/sysctl.d/
echo "Done!"

header "Configuring users"
UID_GID=930
for USER in elasticsearch logstash kibana elastalert curator freqserver domainstats; do
        if grep -q $USER /etc/group; then
                echo "Group $USER already exists!"
        else
                echo "Creating $USER group..."
                groupadd --gid $UID_GID $USER
        fi
        if $(id -u $USER > /dev/null 2>&1); then
                echo "User $USER already exists!"
        else
                echo "Creating $USER user..."
                useradd --uid $UID_GID --gid $UID_GID --home-dir /home/$USER --no-create-home $USER
        fi
        let UID_GID=UID_GID+1
done

header "Configuring ElasticSearch"
for i in /etc/elasticsearch/ /nsm/elasticsearch /var/log/elasticsearch; do
	[ ! -d $i ] && mkdir -p $i
done

touch /etc/nsm/crossclustertab

for i in /nsm/elasticsearch /var/log/elasticsearch /etc/nsm/crossclustertab; do
	chown -R elasticsearch:elasticsearch $i
done

cp -av $SRC/etc/elasticsearch/log4j2.properties /etc/elasticsearch/log4j2.properties

ES_YAML="/etc/elasticsearch/elasticsearch.yml"
ES_YAML_BAK="/etc/elasticsearch/elasticsearch.yml.bak"
if [ ! -f "$ES_YAML" ]; then
	# If no config, create it
	cp -av $SRC/$ES_YAML $ES_YAML
else
	# If config exists, back it up, write the new config file, and then transfer transport settings
	cp -av $ES_YAML $ES_YAML_BAK
	cp -av $SRC/$ES_YAML $ES_YAML

	# Preserve custom settings, if present
	# Transport settings
	# https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-transport.html
	grep transport $ES_YAML_BAK >> $ES_YAML

	# Low/High watermark settings
	# https://www.elastic.co/guide/en/elasticsearch/reference/current/disk-allocator.html#disk-allocator
        grep watermark $ES_YAML_BAK >> $ES_YAML
fi

# Set cluster name
sed -i "s/cluster\.name.*/cluster\.name: \"$HOSTNAME\"/" $ES_YAML
echo "Done!"

header "Configuring Logstash"
for i in /nsm/logstash /var/log/logstash /etc/logstash/conf.d/ /etc/logstash/optional/; do
	[ ! -d $i ] && mkdir -p $i
done
for i in /nsm/logstash /var/log/logstash; do
	chown -R logstash:logstash $i
done

cp -av $SRC/configfiles/*.conf /etc/logstash/conf.d/
cp -av $SRC/configfiles-setup_required/8*_postprocess_dns_*.conf /etc/logstash/optional/
cp -av $SRC/configfiles-setup_required/85*_postprocess_freq_analysis_*.conf /etc/logstash/optional/
cp -av $SRC/etc/logstash/* /etc/logstash/
cp -av $SRC/lib/dictionaries /lib/
#cp -rf $SRC/grok-patterns /lib/
echo "Done!"

header "Configuring Kibana"
for i in /etc/kibana /var/log/kibana; do
	[ ! -d $i ] && mkdir -p $i
	chown -R kibana:kibana $i
done
cp -av $SRC/etc/kibana/* /etc/kibana/
echo "Done!"

header "Configuring Elastalert"
for i in /etc/elastalert/rules /var/log/elastalert; do
	[ ! -d $i ] && mkdir -p $i
	chown -R elastalert:elastalert $i
done
cp -av $SRC/etc/elastalert/rules/* /etc/elastalert/rules/
echo "Done!"

header "Configuring Curator"
for i in /etc/curator/config /etc/curator/action /var/log/curator; do
	[ ! -d $i ] && mkdir -p $i
done
for i in /etc/curator/ /var/log/curator; do
	chown -R curator:curator $i
done
cp -av $SRC/etc/curator/config/* /etc/curator/config/
cp -av $SRC/etc/curator/action/* /etc/curator/action/
echo "Done!"

header "Configuring freq_server"
for i in /var/log/freq_server /var/log/freq_server_dns; do
	[ ! -d $i ] && mkdir -p $i
done
chown -R freqserver:freqserver /var/log/freq_server
echo "Done!"

header "Configuring domain_stats"
mkdir -p /var/log/domain_stats
chown -R domainstats:domainstats /var/log/domain_stats
echo "Done!"

ELSA=NO
[ -f /etc/nsm/securityonion.conf ] && . /etc/nsm/securityonion.conf
if [ $ELSA == "YES" ];then
        . /opt/so/bin/so-elastic-configure-log-size
fi

header "Adding Elastic Stack options to $SOCONF"
while read EACH_LINE; do
        OPTION=$(echo $EACH_LINE | cut -d'=' -f1)
        if ! grep -q "$OPTION" $SOCONF; then
                if echo "$EACH_LINE" | grep -q '#'; then
                        echo >> $SOCONF
                fi
		echo "$EACH_LINE" >> $SOCONF
        fi
done < $ELASTICONF

# domain_stats and freq_server are now disabled by default
# If running Setup in Evaluation Mode, enable freq_server and
# check to see if we can safely enable domain_stats
if pgrep sosetup > /dev/null; then
	if [ -f /opt/bro/etc/node.cfg ] &&  grep "^type=standalone$" /opt/bro/etc/node.cfg > /dev/null; then
	# Enable freq_server
		sed -i 's/^FREQ_SERVER_ENABLED.*/FREQ_SERVER_ENABLED="yes"/' $SOCONF
		# Check for whois connectivity to see if we can enable domain_stats
                echo "Contacting WHOIS server for connectivity..."
                echo
                whois google.com | grep 'Domain Name'
                if [ $? -eq 1 ]; then
                        echo
                        echo "Unable to reach WHOIS server...disabling DomainStats"
                        # Disable domain_stats
			sed -i 's/^DOMAIN_STATS_ENABLED.*/DOMAIN_STATS_ENABLED="no"/' $SOCONF
                else
                        # Enable domain_stats
			sed -i 's/^DOMAIN_STATS_ENABLED.*/DOMAIN_STATS_ENABLED="yes"/' $SOCONF
                fi
	else
		# Disable freq_server and domain_stats
		sed -i 's/^FREQ_SERVER_ENABLED.*/FREQ_SERVER_ENABLED="no"/' $SOCONF
		sed -i 's/^DOMAIN_STATS_ENABLED.*/DOMAIN_STATS_ENABLED="no"/' $SOCONF
		for i in so-domainstats so-freqserver; do
			if docker ps | grep -q $i; then
				docker stop $i
			fi
		done
	fi
fi

# Get total installed memory
TOTAL_MEM=`grep MemTotal /proc/meminfo | awk '{print $2}' | sed -r 's/.{3}$//'`

# If total memory is less than 8GB, we keep the default of 600m for heap size
if [ $TOTAL_MEM -lt 8000 ] ; then
        ES_HEAP_SIZE="600m"
        LS_HEAP_SIZE="1g"
elif [ $TOTAL_MEM -ge 124000 ]; then
        # Set a max of 31GB for heap size
        # https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html
        ES_HEAP_SIZE="31000m"
        LS_HEAP_SIZE="$ES_HEAP_SIZE"
else
        # Set heap size to 25% of available memory
        ES_HEAP_SIZE=$(($TOTAL_MEM / 4))"m"
        LS_HEAP_SIZE="$ES_HEAP_SIZE"
fi

sed -i "s/ELASTICSEARCH_HEAP.*/ELASTICSEARCH_HEAP=\"$ES_HEAP_SIZE\"/" $SOCONF
sed -i "s/LOGSTASH_HEAP.*/LOGSTASH_HEAP=\"$LS_HEAP_SIZE\"/" $SOCONF

echo "Done!"

header "Starting Elastic Stack"
chmod +x /opt/so/bin/so-elastic-*
/opt/so/bin/so-elastic-start
echo "Done!"

header "Configuring Elastic Stack to start on boot"
cp $SRC/etc/init/securityonion.conf /etc/init/securityonion.conf
echo "Done!"
