# Author: Justin Henderson
#         SANS Instructor and author of SANS SEC555: SIEM and Tactical Analytics
# Email: justin@hasecuritysolution.com
# Last Update: 4/11/2017

filter {
  if [type] == "dns" or [type] == "bro_dns" {
    # If Query exists run a frequency analysis against it.  In order for this to work you must have
    # freq.py and the corresponding frequency table in /opt/freq/.  This is a huge boost to security
    # and I highly recommend you set this up.  Example, if a frequency score less than 6 exists
    # then there is a likelihood that something malicious is happening.
    #
    # For higher accuracy, please generate your own frequency tables.  For questions on setup,
    # please refer to https://github.com/SMAPPER
    if [query_type_name] == "A" or [query_type_name] == "AAAA" and "top-1m" not in [tags] {
      if [highest_registered_domain] {
        mutate {
          add_field => { "freq_highest_registered_domain" => "%{highest_registered_domain}"}
        }
        mutate {
          gsub => [ "freq_highest_registered_domain", "\W", "" ]
        }
        rest {
          request => {
            url => "http://freqserver:10004/measure/%{freq_highest_registered_domain}"
          }
          sprintf => true
	        json => false
          target => "highest_registered_domain_frequency_score"
        }
        mutate {
          remove_field => [ "freq_highest_registered_domain" ]
        }
        if [highest_registered_domain_frequency_score] {
          mutate {
            convert => [ "highest_registered_domain_frequency_score", "float" ]
            add_field => { "frequency_scores" => "%{highest_registered_domain_frequency_score}" }
          }
        }
      }
      if [parent_domain] and [parent_domain_length] > 5 {
        mutate {
          add_field => { "freq_parent_domain" => "%{parent_domain}"}
        }
        mutate {
          gsub => [ "freq_parent_domain", "\W", "" ]
        }
        rest {
          request => {
            url => "http://freqserver:10004/measure/%{freq_parent_domain}"
          }
          sprintf => true
	        json => false
          target => "parent_domain_frequency_score"
        }
        mutate {
          remove_field => [ "freq_parent_domain" ]
        }
        if [parent_domain_frequency_score] {
          mutate {
            convert => [ "parent_domain_frequency_score", "float" ]
            add_field => { "frequency_scores" => "%{parent_domain_frequency_score}" }
          }
        }
      }
      if [subdomain] and [subdomain_length] > 5 {
        mutate {
          add_field => { "freq_subdomain" => "%{subdomain}"}
        }
        mutate {
          gsub => [ "freq_subdomain", "\W", "" ]
        }
        rest {
          request => {
            url => "http://freqserver:10004/measure/%{freq_subdomain}"
          }
          sprintf => true
	  json => false
          target => "subdomain_frequency_score"
        }
        mutate {
          remove_field => [ "freq_subdomain" ]
        }
        if [subdomain_frequency_score] {
          mutate {
            convert => [ "subdomain_frequency_score", "float" ]
            add_field => { "frequency_scores" => "%{subdomain_frequency_score}" }
          }
        }
      }
    }
	mutate {
	  #add_tag => [ "conf_file_8502"]
	}
  }
}
